import 'dart:convert';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:pc/screens/Activity_list_screens.dart';
import 'package:pc/screens/Recommendation_input_screens.dart';
import 'package:pc/screens/job_list_screens.dart';

class HomeScreens extends StatefulWidget {
  final String token;
  final String userId;

  const HomeScreens({super.key, required this.token, required this.userId});

  @override
  State<HomeScreens> createState() => _HomeScreensState();
}

class _HomeScreensState extends State<HomeScreens> {
  String userName = '';
  String loginId = '';
  int? usedId;

  @override
  void initState() {
    super.initState();
    loadUserInfo();
  }

  Future<void> loadUserInfo() async {
    final userInfo = await fetchUserInfo(widget.token);
    print('üß™ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥: $userInfo');

    if (userInfo != null) {
      setState(() {
        loginId = userInfo['login_id'] ?? '';
        userName = userInfo['user_name'] ?? ''; // Ïó¨Í∏∞ÏÑú nullÏù¥Í±∞ÎÇò ''Ïùº Ïàò ÏûàÏùå
        usedId = userInfo['user_id'];
      });
    }
  }

  Future<Map<String, dynamic>?> fetchUserInfo(String token) async {
    final url = Uri.parse('http://43.201.74.44/api/v1/users/me');

    final response = await http.get(
      url,
      headers: {'Authorization': '$token', 'Accept': 'application/json'},
    );

    print('üì• ÏÇ¨Ïö©Ïûê Ï°∞Ìöå ÏùëÎãµ ÏΩîÎìú: ${response.statusCode}');
    print('üì• ÏÇ¨Ïö©Ïûê Ï°∞Ìöå ÏùëÎãµ Î≥∏Î¨∏: ${response.body}');

    if (response.statusCode == 200 && response.body.isNotEmpty) {
      final data = jsonDecode(response.body);
      return data['result']; // ‚úÖ Ïó¨Í∏∞Ïóî login_id, user_nameÎßå ÏûàÏùå
    } else {
      print('‚ùå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏùëÎãµ Ïã§Ìå® ÎòêÎäî Î≥∏Î¨∏ ÏóÜÏùå');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF2F2F2),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 20),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 57),
              Text(
                userName.isEmpty ? 'ÏÇ¨Ïö©ÏûêÎãò ÏïàÎÖïÌïòÏÑ∏Ïöî!' : '$userNameÎãò ÏïàÎÖïÌïòÏÑ∏Ïöî!',
                style: const TextStyle(
                  fontFamily: "Roboto",
                  fontWeight: FontWeight.w600,
                  fontSize: 24,
                  color: Color(0xFF262626),
                  letterSpacing: -0.72,
                ),
              ),
              const SizedBox(height: 8),
              const Text(
                'Ïñ¥Îñ†Ìïú ÌôúÎèôÏùÑ ÌïòÍ≥† Ïã∂ÏúºÏã†Í∞ÄÏöî?',
                style: TextStyle(
                  fontFamily: "Roboto",
                  fontWeight: FontWeight.w400,
                  fontSize: 18,
                  color: Color(0xFF262626),
                  letterSpacing: -0.54,
                ),
              ),
              const SizedBox(height: 40),
              buildCard(
                title: 'ÎÇòÎßåÏùò ÏßÑÎ°ú ÎßûÏ∂§ Ìè¨Ïù∏Ìä∏ ÌîåÎûú',
                subtitle: 'ÏßÑÎ°ú Ïó∞Í≥Ñ ÎòêÎäî Ìö®Ïú® Ï§ëÏã¨ÏúºÎ°ú Ïèô ÎΩëÏïÑÎìúÎ¶¥Í≤åÏöî',
                imagePath: 'assets/images/targets.png',
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder:
                          (context) => RecommendationInputScreens(
                            userId: usedId.toString() ?? '',
                            token: widget.token,
                            userName: userName,
                          ),
                    ),
                  );
                },
              ),
              buildCard(
                title: 'Ìè¨Ïù∏Ìä∏ ÌôúÎèô Ï†ÑÏ≤¥ Î≥¥Í∏∞',
                subtitle: 'Îã§ÏñëÌïú Ìè¨Ïù∏Ìä∏ ÌôúÎèôÏùÑ ÎëòÎü¨Î≥¥ÏÑ∏Ïöî',
                imagePath: 'assets/images/points.png',
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder:
                          (context) => ActivityListScreens(
                            userId: widget.userId,
                            token: widget.token,
                          ),
                    ),
                  );
                },
              ),
              buildCard(
                title: 'Í≤ΩÍ∏∞ÎåÄ Ï†ÑÏö© Ï∂îÏ≤ú Ï±ÑÏö© Ï†ïÎ≥¥',
                subtitle: 'Îã§Î•∏ Í≥≥Ïóî ÏóÜÎäî Ïö∞Î¶¨ÌïôÍµê Í∏∞ÌöåÎßå ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî',
                imagePath: 'assets/images/bags.png',
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder:
                          (context) => JobListScreens(
                            userId: widget.userId,
                            token: widget.token,
                          ),
                    ),
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget buildCard({
    required String title,
    required String subtitle,
    required String imagePath,
    void Function()? onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        margin: const EdgeInsets.only(bottom: 40),
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          gradient: RadialGradient(
            center: Alignment.topLeft,
            radius: 2.5,
            colors: [
              const Color(0xFF62B7FF).withOpacity(0.5),
              const Color(0xFFFFFFFF).withOpacity(0.5),
              const Color(0xFFFFDCB5).withOpacity(0.5),
            ],
          ),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: Colors.blueAccent.withOpacity(0.2)),
        ),
        child: Row(
          children: [
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: const TextStyle(
                      fontFamily: "Roboto",
                      fontWeight: FontWeight.w600,
                      fontSize: 24,
                      color: Color(0xFF262626),
                      letterSpacing: -0.72,
                    ),
                  ),
                  Text(
                    subtitle,
                    style: const TextStyle(
                      fontFamily: "Roboto",
                      fontWeight: FontWeight.w400,
                      fontSize: 18,
                      color: Color(0xFF262626),
                      letterSpacing: -0.54,
                    ),
                  ),
                  const SizedBox(height: 10),
                  Transform.rotate(
                    angle: -15 * pi / 180,
                    child: Image.asset(
                      imagePath,
                      width: 138,
                      height: 124,
                      fit: BoxFit.contain,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

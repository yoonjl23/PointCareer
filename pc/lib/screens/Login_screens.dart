import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:pc/screens/Nav_Screens.dart';
import 'package:pc/screens/Signup_screens.dart';

class LoginScreens extends StatefulWidget {
  const LoginScreens({super.key});

  @override
  State<LoginScreens> createState() => _LoginScreensState();
}

class _LoginScreensState extends State<LoginScreens> {
  final TextEditingController studentIdController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  bool saveId = false;
  String? loginError;

  Future<void> _login() async {
    setState(() {
      loginError = null;
    });

    final id = studentIdController.text.trim();
    final password = passwordController.text.trim();

    if (id.isEmpty || password.isEmpty) {
      setState(() {
        loginError = 'ÏïÑÏù¥ÎîîÏôÄ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î™®Îëê ÏûÖÎ†•ÌïòÏÑ∏Ïöî.';
      });
      return;
    }

    final url = Uri.parse('http://43.201.74.44/api/v1/auth/login');

    try {
      print('üì° Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠ ÏãúÏûë');
      print('‚û°Ô∏è ÏûÖÎ†•Îêú ID: $id');
      print('‚û°Ô∏è ÏûÖÎ†•Îêú PW: $password');

      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'loginId': id, 'password': password}),
      );

      print('üì• ÏùëÎãµ ÏÉÅÌÉú ÏΩîÎìú: ${response.statusCode}');
      print('üì• ÏùëÎãµ Î≥∏Î¨∏: ${response.body}');

      final data = jsonDecode(response.body);
      final headers = response.headers;

      if (response.statusCode == 200 && data['status'] == 'success') {
        final userId = data['result']['user_id'].toString();
        final accessToken = headers['authorization']; // ÏÜåÎ¨∏ÏûêÎ°ú ÏûêÎèô Î≥ÄÌôòÎê®
        final refreshToken = headers['authorization_refresh'];

        print('‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ - userId: $userId');
        print('üîê accessToken: $accessToken');
        print('üîÑ refreshToken: $refreshToken');

        if (accessToken == null || refreshToken == null) {
          setState(() {
            loginError = 'ÏÑúÎ≤ÑÏóêÏÑú ÌÜ†ÌÅ∞ÏùÑ Î∞õÏßÄ Î™ªÌñàÏäµÎãàÎã§.';
          });
          return;
        }

        // Îã§Ïùå ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
        print('üß™ ÎÑòÍ∏∞Îäî userId: $userId');
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (_) => NavScreens(token: accessToken, userId: userId),
          ),
        );
      } else {
        setState(() {
          loginError = data['message'] ?? 'ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.';
        });
        print('‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ${data['message']}');
      }
    } catch (e) {
      print('‚ùå ÏòàÏô∏ Î∞úÏÉù: $e');
      setState(() {
        loginError = 'ÏÑúÎ≤Ñ Ïò§Î•ò: ÎÑ§Ìä∏ÏõåÌÅ¨Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF2F2F2),
      body: SingleChildScrollView(
        child: Column(
          children: [
            const SizedBox(height: 100),
            const Text(
              'Í≤ΩÍ∏∞ÎåÄÏÉùÏùÑ ÏúÑÌïú\nÎòëÎòëÌïú Ìè¨Ïù∏Ìä∏ Í¥ÄÎ¶¨ & Ï±ÑÏö©Ï†ïÎ≥¥ ÏÑúÎπÑÏä§',
              style: TextStyle(
                fontFamily: "Roboto",
                fontWeight: FontWeight.w400,
                fontSize: 18,
                letterSpacing: 18 * -0.03,
                color: Color(0xFF7B7B7B),
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 30),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: const [
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 10),
                  child: Image(
                    image: AssetImage('assets/images/clouds.png'),
                    width: 56,
                    height: 56,
                  ),
                ),
                Text(
                  'PointCareer',
                  style: TextStyle(
                    fontSize: 40,
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w700,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 70),

            // ID ÏûÖÎ†•
            SizedBox(
              width: 372,
              height: 60,
              child: TextFormField(
                controller: studentIdController,
                decoration: InputDecoration(
                  hintText: 'sample@kgu.ac.kr',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  filled: true,
                  fillColor: Colors.white,
                ),
              ),
            ),
            const SizedBox(height: 10),

            // PW ÏûÖÎ†•
            SizedBox(
              width: 372,
              height: 60,
              child: TextFormField(
                controller: passwordController,
                obscureText: true,
                decoration: InputDecoration(
                  hintText: 'ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  filled: true,
                  fillColor: Colors.white,
                ),
              ),
            ),

            if (loginError != null)
              Padding(
                padding: const EdgeInsets.only(left: 20.0, top: 8.0),
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: Text(
                    loginError!,
                    style: const TextStyle(color: Colors.red, fontSize: 14),
                  ),
                ),
              ),

            const SizedBox(height: 19),

            // Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
            SizedBox(
              width: 372,
              height: 60,
              child: ElevatedButton(
                onPressed: _login,
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF1877DD),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                child: const Text(
                  'Î°úÍ∑∏Ïù∏',
                  style: TextStyle(
                    fontSize: 18,
                    color: Color(0xFFE2E2E2),
                    fontFamily: 'Roboto',
                  ),
                ),
              ),
            ),

            const SizedBox(height: 10),

            // ÌöåÏõêÍ∞ÄÏûÖ Î≤ÑÌäº
            SizedBox(
              width: 372,
              height: 60,
              child: ElevatedButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const SignupScreens(),
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFFF2F2F2),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                child: const Text(
                  'ÌöåÏõêÍ∞ÄÏûÖ',
                  style: TextStyle(
                    fontSize: 18,
                    color: Color(0xFF7B7B7B),
                    fontFamily: 'Roboto',
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ),

            // Ï†ÄÏû• ID Ï≤¥ÌÅ¨Î∞ïÏä§
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Expanded(
                  child: CheckboxListTile(
                    value: saveId,
                    onChanged: (bool? value) {
                      setState(() {
                        saveId = value ?? false;
                      });
                    },
                    controlAffinity: ListTileControlAffinity.leading,
                    contentPadding: EdgeInsets.zero,
                    activeColor: const Color(0xFF517CF6),
                    title: const Text(
                      "Saved ID",
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.w400,
                        fontFamily: 'Roboto',
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
